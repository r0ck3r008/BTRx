// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logmsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_logmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_logmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_logmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_logmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_logmsg_2eproto;
namespace logger {
class LogMsgT;
class LogMsgTDefaultTypeInternal;
extern LogMsgTDefaultTypeInternal _LogMsgT_default_instance_;
}  // namespace logger
PROTOBUF_NAMESPACE_OPEN
template<> ::logger::LogMsgT* Arena::CreateMaybeMessage<::logger::LogMsgT>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace logger {

enum LogMsgT_LogLvlT : int {
  LogMsgT_LogLvlT_Dummy = 0,
  LogMsgT_LogLvlT_LOG_CXNT = 1,
  LogMsgT_LogLvlT_LOG_CXNR = 2,
  LogMsgT_LogLvlT_LOG_NBR = 4,
  LogMsgT_LogLvlT_LOG_OUCHK = 8,
  LogMsgT_LogLvlT_LOG_UCHK = 16,
  LogMsgT_LogLvlT_LOG_CHK = 32,
  LogMsgT_LogLvlT_LOG_HV = 64,
  LogMsgT_LogLvlT_LOG_INT = 128,
  LogMsgT_LogLvlT_LOG_UINT = 256,
  LogMsgT_LogLvlT_LOG_DWL = 512,
  LogMsgT_LogLvlT_LOG_DWLD = 1024,
  LogMsgT_LogLvlT_LOG_ERR = 2048,
  LogMsgT_LogLvlT_LOG_WRN = 4096,
  LogMsgT_LogLvlT_LOG_INFO = 8192,
  LogMsgT_LogLvlT_LOG_DBG = 16384,
  LogMsgT_LogLvlT_LogMsgT_LogLvlT_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LogMsgT_LogLvlT_LogMsgT_LogLvlT_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LogMsgT_LogLvlT_IsValid(int value);
constexpr LogMsgT_LogLvlT LogMsgT_LogLvlT_LogLvlT_MIN = LogMsgT_LogLvlT_Dummy;
constexpr LogMsgT_LogLvlT LogMsgT_LogLvlT_LogLvlT_MAX = LogMsgT_LogLvlT_LOG_DBG;
constexpr int LogMsgT_LogLvlT_LogLvlT_ARRAYSIZE = LogMsgT_LogLvlT_LogLvlT_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogMsgT_LogLvlT_descriptor();
template<typename T>
inline const std::string& LogMsgT_LogLvlT_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogMsgT_LogLvlT>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogMsgT_LogLvlT_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogMsgT_LogLvlT_descriptor(), enum_t_value);
}
inline bool LogMsgT_LogLvlT_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogMsgT_LogLvlT* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogMsgT_LogLvlT>(
    LogMsgT_LogLvlT_descriptor(), name, value);
}
// ===================================================================

class LogMsgT PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:logger.LogMsgT) */ {
 public:
  inline LogMsgT() : LogMsgT(nullptr) {}
  virtual ~LogMsgT();

  LogMsgT(const LogMsgT& from);
  LogMsgT(LogMsgT&& from) noexcept
    : LogMsgT() {
    *this = ::std::move(from);
  }

  inline LogMsgT& operator=(const LogMsgT& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogMsgT& operator=(LogMsgT&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogMsgT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogMsgT* internal_default_instance() {
    return reinterpret_cast<const LogMsgT*>(
               &_LogMsgT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogMsgT& a, LogMsgT& b) {
    a.Swap(&b);
  }
  inline void Swap(LogMsgT* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogMsgT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogMsgT* New() const final {
    return CreateMaybeMessage<LogMsgT>(nullptr);
  }

  LogMsgT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogMsgT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogMsgT& from);
  void MergeFrom(const LogMsgT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogMsgT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "logger.LogMsgT";
  }
  protected:
  explicit LogMsgT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logmsg_2eproto);
    return ::descriptor_table_logmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LogMsgT_LogLvlT LogLvlT;
  static constexpr LogLvlT Dummy =
    LogMsgT_LogLvlT_Dummy;
  static constexpr LogLvlT LOG_CXNT =
    LogMsgT_LogLvlT_LOG_CXNT;
  static constexpr LogLvlT LOG_CXNR =
    LogMsgT_LogLvlT_LOG_CXNR;
  static constexpr LogLvlT LOG_NBR =
    LogMsgT_LogLvlT_LOG_NBR;
  static constexpr LogLvlT LOG_OUCHK =
    LogMsgT_LogLvlT_LOG_OUCHK;
  static constexpr LogLvlT LOG_UCHK =
    LogMsgT_LogLvlT_LOG_UCHK;
  static constexpr LogLvlT LOG_CHK =
    LogMsgT_LogLvlT_LOG_CHK;
  static constexpr LogLvlT LOG_HV =
    LogMsgT_LogLvlT_LOG_HV;
  static constexpr LogLvlT LOG_INT =
    LogMsgT_LogLvlT_LOG_INT;
  static constexpr LogLvlT LOG_UINT =
    LogMsgT_LogLvlT_LOG_UINT;
  static constexpr LogLvlT LOG_DWL =
    LogMsgT_LogLvlT_LOG_DWL;
  static constexpr LogLvlT LOG_DWLD =
    LogMsgT_LogLvlT_LOG_DWLD;
  static constexpr LogLvlT LOG_ERR =
    LogMsgT_LogLvlT_LOG_ERR;
  static constexpr LogLvlT LOG_WRN =
    LogMsgT_LogLvlT_LOG_WRN;
  static constexpr LogLvlT LOG_INFO =
    LogMsgT_LogLvlT_LOG_INFO;
  static constexpr LogLvlT LOG_DBG =
    LogMsgT_LogLvlT_LOG_DBG;
  static inline bool LogLvlT_IsValid(int value) {
    return LogMsgT_LogLvlT_IsValid(value);
  }
  static constexpr LogLvlT LogLvlT_MIN =
    LogMsgT_LogLvlT_LogLvlT_MIN;
  static constexpr LogLvlT LogLvlT_MAX =
    LogMsgT_LogLvlT_LogLvlT_MAX;
  static constexpr int LogLvlT_ARRAYSIZE =
    LogMsgT_LogLvlT_LogLvlT_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LogLvlT_descriptor() {
    return LogMsgT_LogLvlT_descriptor();
  }
  template<typename T>
  static inline const std::string& LogLvlT_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LogLvlT>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LogLvlT_Name.");
    return LogMsgT_LogLvlT_Name(enum_t_value);
  }
  static inline bool LogLvlT_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LogLvlT* value) {
    return LogMsgT_LogLvlT_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 3,
    kLogMsgFieldNumber = 2,
    kLogLvlFieldNumber = 1,
  };
  // repeated int32 Id = 3;
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_id() const;
  void _internal_add_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 id(int index) const;
  void set_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_id();

  // string LogMsg = 2;
  void clear_logmsg();
  const std::string& logmsg() const;
  void set_logmsg(const std::string& value);
  void set_logmsg(std::string&& value);
  void set_logmsg(const char* value);
  void set_logmsg(const char* value, size_t size);
  std::string* mutable_logmsg();
  std::string* release_logmsg();
  void set_allocated_logmsg(std::string* logmsg);
  private:
  const std::string& _internal_logmsg() const;
  void _internal_set_logmsg(const std::string& value);
  std::string* _internal_mutable_logmsg();
  public:

  // .logger.LogMsgT.LogLvlT LogLvl = 1;
  void clear_loglvl();
  ::logger::LogMsgT_LogLvlT loglvl() const;
  void set_loglvl(::logger::LogMsgT_LogLvlT value);
  private:
  ::logger::LogMsgT_LogLvlT _internal_loglvl() const;
  void _internal_set_loglvl(::logger::LogMsgT_LogLvlT value);
  public:

  // @@protoc_insertion_point(class_scope:logger.LogMsgT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > id_;
  mutable std::atomic<int> _id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logmsg_;
  int loglvl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogMsgT

// .logger.LogMsgT.LogLvlT LogLvl = 1;
inline void LogMsgT::clear_loglvl() {
  loglvl_ = 0;
}
inline ::logger::LogMsgT_LogLvlT LogMsgT::_internal_loglvl() const {
  return static_cast< ::logger::LogMsgT_LogLvlT >(loglvl_);
}
inline ::logger::LogMsgT_LogLvlT LogMsgT::loglvl() const {
  // @@protoc_insertion_point(field_get:logger.LogMsgT.LogLvl)
  return _internal_loglvl();
}
inline void LogMsgT::_internal_set_loglvl(::logger::LogMsgT_LogLvlT value) {
  
  loglvl_ = value;
}
inline void LogMsgT::set_loglvl(::logger::LogMsgT_LogLvlT value) {
  _internal_set_loglvl(value);
  // @@protoc_insertion_point(field_set:logger.LogMsgT.LogLvl)
}

// string LogMsg = 2;
inline void LogMsgT::clear_logmsg() {
  logmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogMsgT::logmsg() const {
  // @@protoc_insertion_point(field_get:logger.LogMsgT.LogMsg)
  return _internal_logmsg();
}
inline void LogMsgT::set_logmsg(const std::string& value) {
  _internal_set_logmsg(value);
  // @@protoc_insertion_point(field_set:logger.LogMsgT.LogMsg)
}
inline std::string* LogMsgT::mutable_logmsg() {
  // @@protoc_insertion_point(field_mutable:logger.LogMsgT.LogMsg)
  return _internal_mutable_logmsg();
}
inline const std::string& LogMsgT::_internal_logmsg() const {
  return logmsg_.Get();
}
inline void LogMsgT::_internal_set_logmsg(const std::string& value) {
  
  logmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogMsgT::set_logmsg(std::string&& value) {
  
  logmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:logger.LogMsgT.LogMsg)
}
inline void LogMsgT::set_logmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:logger.LogMsgT.LogMsg)
}
inline void LogMsgT::set_logmsg(const char* value,
    size_t size) {
  
  logmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:logger.LogMsgT.LogMsg)
}
inline std::string* LogMsgT::_internal_mutable_logmsg() {
  
  return logmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogMsgT::release_logmsg() {
  // @@protoc_insertion_point(field_release:logger.LogMsgT.LogMsg)
  return logmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogMsgT::set_allocated_logmsg(std::string* logmsg) {
  if (logmsg != nullptr) {
    
  } else {
    
  }
  logmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:logger.LogMsgT.LogMsg)
}

// repeated int32 Id = 3;
inline int LogMsgT::_internal_id_size() const {
  return id_.size();
}
inline int LogMsgT::id_size() const {
  return _internal_id_size();
}
inline void LogMsgT::clear_id() {
  id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogMsgT::_internal_id(int index) const {
  return id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogMsgT::id(int index) const {
  // @@protoc_insertion_point(field_get:logger.LogMsgT.Id)
  return _internal_id(index);
}
inline void LogMsgT::set_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:logger.LogMsgT.Id)
}
inline void LogMsgT::_internal_add_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  id_.Add(value);
}
inline void LogMsgT::add_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_id(value);
  // @@protoc_insertion_point(field_add:logger.LogMsgT.Id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LogMsgT::_internal_id() const {
  return id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LogMsgT::id() const {
  // @@protoc_insertion_point(field_list:logger.LogMsgT.Id)
  return _internal_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LogMsgT::_internal_mutable_id() {
  return &id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LogMsgT::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:logger.LogMsgT.Id)
  return _internal_mutable_id();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace logger

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::logger::LogMsgT_LogLvlT> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::logger::LogMsgT_LogLvlT>() {
  return ::logger::LogMsgT_LogLvlT_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_logmsg_2eproto
