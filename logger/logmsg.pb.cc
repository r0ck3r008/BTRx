// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logmsg.proto

#include "logmsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace logger {
class LogMsgTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogMsgT> _instance;
} _LogMsgT_default_instance_;
}  // namespace logger
static void InitDefaultsscc_info_LogMsgT_logmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logger::_LogMsgT_default_instance_;
    new (ptr) ::logger::LogMsgT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logger::LogMsgT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogMsgT_logmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogMsgT_logmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_logmsg_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_logmsg_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_logmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_logmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::logger::LogMsgT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::logger::LogMsgT, loglvl_),
  PROTOBUF_FIELD_OFFSET(::logger::LogMsgT, logmsg_),
  PROTOBUF_FIELD_OFFSET(::logger::LogMsgT, id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::logger::LogMsgT)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::logger::_LogMsgT_default_instance_),
};

const char descriptor_table_protodef_logmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014logmsg.proto\022\006logger\"\270\002\n\007LogMsgT\022\'\n\006Lo"
  "gLvl\030\001 \001(\0162\027.logger.LogMsgT.LogLvlT\022\016\n\006L"
  "ogMsg\030\002 \001(\t\022\n\n\002Id\030\003 \003(\005\"\347\001\n\007LogLvlT\022\t\n\005D"
  "ummy\020\000\022\014\n\010LOG_CXNT\020\001\022\014\n\010LOG_CXNR\020\002\022\013\n\007LO"
  "G_NBR\020\004\022\r\n\tLOG_OUCHK\020\010\022\014\n\010LOG_UCHK\020\020\022\013\n\007"
  "LOG_CHK\020 \022\n\n\006LOG_HV\020@\022\014\n\007LOG_INT\020\200\001\022\r\n\010L"
  "OG_UINT\020\200\002\022\014\n\007LOG_DWL\020\200\004\022\r\n\010LOG_DWLD\020\200\010\022"
  "\014\n\007LOG_ERR\020\200\020\022\014\n\007LOG_WRN\020\200 \022\r\n\010LOG_INFO\020"
  "\200@\022\r\n\007LOG_DBG\020\200\200\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_logmsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_logmsg_2eproto_sccs[1] = {
  &scc_info_LogMsgT_logmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_logmsg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_logmsg_2eproto = {
  false, false, descriptor_table_protodef_logmsg_2eproto, "logmsg.proto", 345,
  &descriptor_table_logmsg_2eproto_once, descriptor_table_logmsg_2eproto_sccs, descriptor_table_logmsg_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_logmsg_2eproto::offsets,
  file_level_metadata_logmsg_2eproto, 1, file_level_enum_descriptors_logmsg_2eproto, file_level_service_descriptors_logmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_logmsg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_logmsg_2eproto)), true);
namespace logger {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogMsgT_LogLvlT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_logmsg_2eproto);
  return file_level_enum_descriptors_logmsg_2eproto[0];
}
bool LogMsgT_LogLvlT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LogMsgT_LogLvlT LogMsgT::Dummy;
constexpr LogMsgT_LogLvlT LogMsgT::LOG_CXNT;
constexpr LogMsgT_LogLvlT LogMsgT::LOG_CXNR;
constexpr LogMsgT_LogLvlT LogMsgT::LOG_NBR;
constexpr LogMsgT_LogLvlT LogMsgT::LOG_OUCHK;
constexpr LogMsgT_LogLvlT LogMsgT::LOG_UCHK;
constexpr LogMsgT_LogLvlT LogMsgT::LOG_CHK;
constexpr LogMsgT_LogLvlT LogMsgT::LOG_HV;
constexpr LogMsgT_LogLvlT LogMsgT::LOG_INT;
constexpr LogMsgT_LogLvlT LogMsgT::LOG_UINT;
constexpr LogMsgT_LogLvlT LogMsgT::LOG_DWL;
constexpr LogMsgT_LogLvlT LogMsgT::LOG_DWLD;
constexpr LogMsgT_LogLvlT LogMsgT::LOG_ERR;
constexpr LogMsgT_LogLvlT LogMsgT::LOG_WRN;
constexpr LogMsgT_LogLvlT LogMsgT::LOG_INFO;
constexpr LogMsgT_LogLvlT LogMsgT::LOG_DBG;
constexpr LogMsgT_LogLvlT LogMsgT::LogLvlT_MIN;
constexpr LogMsgT_LogLvlT LogMsgT::LogLvlT_MAX;
constexpr int LogMsgT::LogLvlT_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void LogMsgT::InitAsDefaultInstance() {
}
class LogMsgT::_Internal {
 public:
};

LogMsgT::LogMsgT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:logger.LogMsgT)
}
LogMsgT::LogMsgT(const LogMsgT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      id_(from.id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  logmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logmsg().empty()) {
    logmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_logmsg(),
      GetArena());
  }
  loglvl_ = from.loglvl_;
  // @@protoc_insertion_point(copy_constructor:logger.LogMsgT)
}

void LogMsgT::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogMsgT_logmsg_2eproto.base);
  logmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  loglvl_ = 0;
}

LogMsgT::~LogMsgT() {
  // @@protoc_insertion_point(destructor:logger.LogMsgT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogMsgT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  logmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogMsgT::ArenaDtor(void* object) {
  LogMsgT* _this = reinterpret_cast< LogMsgT* >(object);
  (void)_this;
}
void LogMsgT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogMsgT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogMsgT& LogMsgT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogMsgT_logmsg_2eproto.base);
  return *internal_default_instance();
}


void LogMsgT::Clear() {
// @@protoc_insertion_point(message_clear_start:logger.LogMsgT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.Clear();
  logmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  loglvl_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogMsgT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .logger.LogMsgT.LogLvlT LogLvl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_loglvl(static_cast<::logger::LogMsgT_LogLvlT>(val));
        } else goto handle_unusual;
        continue;
      // string LogMsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_logmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "logger.LogMsgT.LogMsg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 Id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogMsgT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:logger.LogMsgT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logger.LogMsgT.LogLvlT LogLvl = 1;
  if (this->loglvl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_loglvl(), target);
  }

  // string LogMsg = 2;
  if (this->logmsg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logmsg().data(), static_cast<int>(this->_internal_logmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "logger.LogMsgT.LogMsg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_logmsg(), target);
  }

  // repeated int32 Id = 3;
  {
    int byte_size = _id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logger.LogMsgT)
  return target;
}

size_t LogMsgT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logger.LogMsgT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Id = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string LogMsg = 2;
  if (this->logmsg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logmsg());
  }

  // .logger.LogMsgT.LogLvlT LogLvl = 1;
  if (this->loglvl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_loglvl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogMsgT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logger.LogMsgT)
  GOOGLE_DCHECK_NE(&from, this);
  const LogMsgT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogMsgT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logger.LogMsgT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logger.LogMsgT)
    MergeFrom(*source);
  }
}

void LogMsgT::MergeFrom(const LogMsgT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logger.LogMsgT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_.MergeFrom(from.id_);
  if (from.logmsg().size() > 0) {
    _internal_set_logmsg(from._internal_logmsg());
  }
  if (from.loglvl() != 0) {
    _internal_set_loglvl(from._internal_loglvl());
  }
}

void LogMsgT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logger.LogMsgT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMsgT::CopyFrom(const LogMsgT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logger.LogMsgT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMsgT::IsInitialized() const {
  return true;
}

void LogMsgT::InternalSwap(LogMsgT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.InternalSwap(&other->id_);
  logmsg_.Swap(&other->logmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(loglvl_, other->loglvl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogMsgT::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace logger
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::logger::LogMsgT* Arena::CreateMaybeMessage< ::logger::LogMsgT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::logger::LogMsgT >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
